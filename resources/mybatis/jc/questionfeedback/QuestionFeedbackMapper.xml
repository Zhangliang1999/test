<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.jy.repository.jc.questionfeedback.QuestionFeedbackDao">
    <resultMap id="BaseResultMap" type="questionFeedback">
        <id column="question_id" property="questionId" jdbcType="VARCHAR"/>
        <result column="user_id" property="userId" jdbcType="VARCHAR"/>
        <result column="question" property="question" jdbcType="VARCHAR"/>
        <result column="contact" property="contact" jdbcType="VARCHAR"/>
        <result column="reply_id" property="replyId" jdbcType="VARCHAR"/>
        <result column="reply_content" property="replyContent" jdbcType="VARCHAR"/>
        <result column="create_time" property="createTime" jdbcType="TIMESTAMP"/>
        <result column="update_time" property="updateTime" jdbcType="TIMESTAMP"/>
    </resultMap>
    <sql id="Base_Column_List">
    question_id, user_id, question, contact, reply_id, reply_content, create_time, update_time
    </sql>
    <select id="find" resultMap="BaseResultMap" parameterType="questionFeedback">
        select
        <include refid="Base_Column_List"/>
        from jc_question_feedback
        where question_id = #{questionId,jdbcType=VARCHAR}
    </select>
    <select id="findByPage" resultMap="BaseResultMap" parameterType="questionFeedback">
        select
        <include refid="Base_Column_List"/>
        from jc_question_feedback
        where 1=1
        <if test="param.keyWord != null">
            and (
            user_id LIKE CONCAT('%',#{param.keyWord},'%')
            or contact LIKE CONCAT('%',#{param.keyWord},'%')
            or question LIKE CONCAT('%',#{param.keyWord},'%')
            or reply_id LIKE CONCAT('%',#{param.keyWord},'%')
            or reply_content LIKE CONCAT('%',#{param.keyWord},'%')
            )
        </if>
        order by create_time desc
    </select>
    <delete id="delete" parameterType="questionFeedback">
    delete from jc_question_feedback
    where question_id = #{questionId,jdbcType=VARCHAR}
    </delete>
    <delete id="deleteBatch" parameterType="java.util.List">
        delete from jc_question_feedback
        where question_id in (
        <foreach item="o" collection="list" open="" separator="," close="">
            #{o.questionId}
        </foreach>
        )
    </delete>
    <insert id="insert" parameterType="questionFeedback">
    insert into jc_question_feedback (question_id, user_id, question,
      contact, reply_id, reply_content, 
      create_time, update_time)
    values (#{questionId,jdbcType=VARCHAR}, #{userId,jdbcType=VARCHAR}, #{question,jdbcType=VARCHAR}, 
      #{contact,jdbcType=VARCHAR}, #{replyId,jdbcType=VARCHAR}, #{replyContent,jdbcType=VARCHAR}, 
      #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP})
  </insert>
    <update id="update" parameterType="questionFeedback">
        update jc_question_feedback
        <set>
            <if test="userId != null">
                user_id = #{userId,jdbcType=VARCHAR},
            </if>
            <if test="question != null">
                question = #{question,jdbcType=VARCHAR},
            </if>
            <if test="contact != null">
                contact = #{contact,jdbcType=VARCHAR},
            </if>
            <if test="replyId != null">
                reply_id = #{replyId,jdbcType=VARCHAR},
            </if>
            <if test="replyContent != null">
                reply_content = #{replyContent,jdbcType=VARCHAR},
            </if>
            <if test="createTime != null">
                create_time = #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null">
                update_time = #{updateTime,jdbcType=TIMESTAMP},
            </if>
        </set>
        where question_id = #{questionId,jdbcType=VARCHAR}
    </update>
</mapper>